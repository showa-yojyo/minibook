======================================================================
入門 HTML5 読書ノート
======================================================================

.. admonition:: 読者ノート

   なにぶん古い図書なので、

   * リンク切れの URL は可能な範囲で更新する（無意味かもしれない）。
   * Internet Explorer に関する記述は無視する。

:著者: Mark Pilgrim
:訳者: 水原文
:監訳者: 矢倉眞隆
:出版社: オライリー・ジャパン
:発行年: 2011 年
:ISBN: 978-4-87311-482-8

監訳者まえがき
======================================================================

この書籍の概要は次のとおり：

   本書『入門 HTML5』は、Google で Developer Advocate を務める Mark Pilgrim によ
   る HTML5 と周辺技術の書籍『HTML5: Up and Runing』の日本語訳になります。

`Developer Center <https://cloud.google.com/developers/advocates>`__ で
Developer Advocate なる役職の一覧が確認できる。役割の詳細もそこに述べられている。

   この原著、その原稿やデモすべてが Creative Commons の Attribution ライセンスの
   もと、`Dive Into HTML5 <http://diveintohtml5.info>`__ というサイトで公開され
   ています。

ということは、紙の本から読書ノートを綴らなくとも、つねに最新版である原稿を公開し
ている上記サイトを読めば良かったかもしれない。

まえがき
======================================================================

本書で焦点が当たるトピックが箇条書きになっている。本ノートの見通しをよくするため
にも控えておく：

   * ``<header>``, ``<footer>``, そして ``<section>`` などの新たな意味要素 (3
     章)
   * JavaScript でプログラム可能な二次元の図形描画機能、Canvas (4 章)
   * サードパーティ製プラグインの助けを借りずに Web へ埋め込み可能なビデオ (5
     章)
   * Web アプリケーションへ、自分の居る位置を通知できる位置情報通知機能 (6 章)
   * サードパーティ製プラグインを必要としない永続的ローカルストレージ (7 章)
   * ネットワークアクセスが切断された後でも動作可能なオフライン Web アプリケー
     ション (8 章)
   * 改良された HTML フォーム (9 章)
   * HTML5 にはない語彙を作成し、Web ページに独自の意味づけが可能なマイクロデー
     タ

個人的に興味があるのは第 3, 4, 9 章だ。ビデオ編集する習慣があることから第 5 章も
参考になる。

.. contents::

1 章 ここまでの道のり
======================================================================

著者が《心の片隅に留めておいて欲しい》という言葉をほぼ引用しておく：

   実装と詳細の間には、微妙な関係を保つ必要がある。使用が完成する前に実装が行わ
   れることは望ましくない。なぜならば、既存の実装の詳細に引きずられ、仕様が制約
   されてしまうからだ。しかし、実装されたものが利用されないまま仕様が完成するこ
   ともまた望ましくない。なぜならば、利用者からのフィードバックが必要だからだ。

実装と詳細は、一方が「主」で他方が「従」ということではないということか。

この後は読み物のようなテキストが続く。:abbr:`WHATWG (Web Hypertext Application
Technology Working Group)` の誕生くらいまで読み流す感じでいい。

   十年に及ぶ HTML への投資を無駄にし、また既存 Web ページの 99 パーセントを使え
   なくする代わりに、WHATWG は別のアプローチを取ることにした。ブラウザが実際に利
   用している「寛大な」エラー処理アルゴリズムを文書化することだ。

これは解析だ。

   そして、2006 年 10 月、ついに W3C の創設者である Tim Berners-Lee が、HTML の進
   化のために W3C が WHATWG と経堂で作業を進めることを発表した。

和解のようなものと考えられる。なお、:abbr:`W3C (World Wide Web Consortium)` とい
う用語は、私の読み抜けがなければ、何の説明もなしに本文に登場した。

   再設立され、生まれ変わった W3C HTML ワーキンググループが最初に行った決定のひ
   とつは、「Web Application 1.0」を「HTML5」と改名することだった。

引用しなかったが、Web Application 1.0 とは解析作業と並行して進行していたキャンバ
ス、ビデオサポート等のドラフトだ。

2 章 HTML5 の機能を検出する
======================================================================

   HTML5 はひとつの大きなものではなく、個別の機能が集まったものなのだ。

したがって、例えば「キャンバスは対応済みか？」「ビデオは対応済みか？」などを調べ
ることをこの章では検討していく。

   ブラウザが特定の機能をサポートしているかどうかを検出するための、基本的なテク
   ニックは 4 つある。

本文の技法一覧を単純化して列挙しておく：

1. ``window`` や ``navigator`` グローバルオブジェクトに対して、特定のプロパ
   ティーが存在するかを調べる。
2. ``new`` した要素に対して特定のプロパティーが存在するかを調べる。
3. ``new`` した要素に対して特定のメソッドが存在するかを調べる。それを呼び出して
   戻り値を調べる。
4. ``new`` した要素に対してプロパティーを特定の値に設定し、それが値を保持してい
   るかを調べる。

以上は、当然ながら JavaScript コードを走らせて検出する。

   `Modernzir <https://modernizr.com/>`__ は、オープンソースで MIT ライセンス
   の、数多くの HTML5 と CSS3 機能のサポートを検出してくれる JavaScript ライブラ
   リだ。

この JS ファイルをローカルに用意して ``<head>`` 内から ``<script>`` で読み込ませ
れば利用可能になる。オブジェクト ``Modernizr`` にブラウザーが特定の機能に対応し
ているかどうかを示すフラグを持っている。例えばキャンバスを使いたければ真偽値
``Modernizr.canvas`` を調べるという具合だ。本章はこのように、個別機能と検出方法
紹介を並べる構造になっているが、本ノートでは割愛する。現代的ブラウザーではどうせ
対応されているので。

   ブラウザが HTML5 ビデオをサポートしていない場合には、``<video>`` 要素として作
   成された DOM オブジェクトは共通プロパティのみを持っているはずだ。

この考え方はビデオ以外の HTML5 新機能についても成り立つ。興味があるので、ビデオ
に関する記述を中心に引用する。

「コーデック」を次のように定義している：

   ビデオをビットストリームへエンコードする際に使われるアルゴリズムのことだ。

先程の判定論理の「裏」が述べられる：

   ブラウザが HTML5 ビデオをサポートしていれば、``<video>`` 要素として作成された
   DOM オブジェクトは ``canPlayType()`` メソッドを持っているはずだ。

ローカルストレージの節の冒頭：

   HTML5 のストレージは、ウェブサイトがコンピュータに情報を保存して後で使うため
   の手段を提供する。概念としてはクッキーに似ているが、より大きな情報量を取り扱
   えるように設計されている。

本書の後半で一章割いて説明される。

本書では「マークアップ教授に質問」という質問と回答形式の囲み記事が随所に現れる。
次の概念は重要なので引用する：

   ブラウザの中では、どの Web サイトも自信が保存した値を読んだり変更したりできる
   が、別のサイトが保存した値へのアクセスはできない。このことは、同一生成元制約
   (same-origin restriction) と呼ばれている。

``<input>`` 要素の ``type`` 属性になり得る値が HTML5 で急増したことが述べられて
いる。他にも、

   プレースホルダは、そのフィールドが空で、かつそこにフォーカスがない場合に入力
   フィールド中に表示される

機能がある。また、フォーカスに関しては、

   HTML5 はすべてのフォームコントロールに ``autofocus`` 属性を導入した。この
   ``autofocus`` 属性は、フォーカスを特定のフィールドへ移動するという、文字通り
   の働きをする。

最後に、聞き馴染みのない機能を知る：

   マイクロデータは、Web ページに意味付けを追加するための標準的な方法だ。例え
   ば、マイクロデータを使ってある写真が特定のクリエイティブコモンズライセンスで
   利用できることを宣言できる。

3 章 HTML 文書の構造と意味付け
======================================================================

4 章 Canvas による描画
======================================================================

5 章 Web のビデオ
======================================================================

6 章 Geolocation API による位置情報通知
======================================================================

7 章 Web アプリケーションのローカルストレージ：その過去・現在・未来
======================================================================

8 章 オフライン状態での動作
======================================================================

9 章 Web フォーム
======================================================================

10 章 マイクロデータによるマークアップの拡張
======================================================================

付録 A （ほぼ）アルファベット順の HTML5 機能機能方法
======================================================================

.. 以上
