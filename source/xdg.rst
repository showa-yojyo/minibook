======================================================================
XDG Base Directory 利用ノート
======================================================================

.. contents:: 本章見出し
   :local:

目的
======================================================================

.. |HOME| replace:: :file:`$HOME`

Linux, WSL, Cygwin, MSYS2, MinGW 等のホームディレクトリー |HOME| に散らかる各種
アプリケーションのドットファイルを単一のリポジトリーに集約して Gitなどでバージョ
ン管理したい。|HOME| 直下をリポジトリーにするわけには一般的にはいかないが、
[XDGSpec]_ に準拠しているアプリケーションのドットファイルに限定すれば、実現可能
だ。

本稿の目標は、|HOME| にあるドットファイル群を可能な限り専用ディレクトリーに再配
置し、バージョン管理対象にすることだ。

概要
======================================================================

昔はドットファイルを収めるサブディレクトリーを一つ作成し、ホームディレクトリー直
下にそれらを参照するシンボリックリンクを作成してごまかしていた。仕様 [XDGSpec]_
に準拠しているアプリケーションでは、ドットファイルのパスにかなりの柔軟性がある。
ありがちなのは、環境変数 ``XDG_CONFIG_HOME`` に対して、ディレクトリー
:samp:`$XDG_CONFIG_HOME/{appname}` 以下にユーザー固有の当該アプリケーション設定
ファイルが置かれるという状況だ。ここで、

* :samp:`{appname}` はアプリケーションが独自に定義する文字列であるとする。
* 環境変数 ``XDG_CONFIG_HOME`` は絶対パスとする。

作業
======================================================================

XDG 環境変数を定義する
----------------------------------------------------------------------

上述の環境変数を対話シェルの初期化時に定義する。Bash ならファイル
:file:`.bashrc` のなるべく先頭に近い行に次のように記す：

.. code:: bash

   export XDG_DATA_HOME=$HOME/.local/share
   export XDG_CONFIG_HOME=$HOME/.config
   export XDG_STATE_HOME=$HOME/.local/state
   export XDG_CACHE_HOME=$HOME/.cache

上記のサブディレクトリー群が存在しなければ、それを ``mkdir -p`` する。

.. note::

   簡単のため、本稿では ``XDG_CONFIG_HOME`` を中心に記し、他の XDG 変数について
   はほとんど触れないことにする。詳しくは [XDGWiki]_ の関連記述を参照しろ。

既存のドットファイルを再配置する
----------------------------------------------------------------------

.. |XDG_CONFIG_HOME| replace:: :file:`$XDG_CONFIG_HOME`

[XDGWiki]_ の 2.2 節を眺めながら [XDGSpec]_ に対応しているアプリケーションのドッ
トファイルを |HOME| から |XDG_CONFIG_HOME| のサブディレクトリーに順次再配置す
る。例えば Git のドットファイル :file:`$HOME/.gitconfig` に対する手順は次のよう
なものだ：

.. code:: console

   $ cd
   $ mkdir -p ./.config/git
   $ mv .gitignore ./.config/git/config

上述資料の表にあるアプリケーションすべてに対応したとしても |HOME| 直下にドット
ファイルがいくつか残る。[XDGWiki]_ 2.3 節にある項目については少々手間をかけて
|XDG_CONFIG_HOME| に順次移す。アプリケーション固有の環境変数を XDG 変数で定義す
るパターンが多い。その :command:`export` は上述のシェル初期化ファイルで実行す
る。例えば Readline については：

.. code:: bash

   export INPUTRC="$XDG_CONFIG_HOME"/readline/inputrc

を :file:`.bashrc` に記述しておき、ドットファイルを移す：

.. code:: console

   $ cd
   $ mkdir readline
   $ mv .inputrc readline/inputrc

[XDGWiki]_ 2.4 節にあるアプリケーションは直接対応はしていないので、工夫できるものは
そうするという態度だ。まったくお手上げのアプリケーションもあるが、オープンソース
プロジェクトで開発しているものならば、XDG 対応を開発陣に依頼するという手もある。

バージョン管理を始める
----------------------------------------------------------------------

:file:`$XDG_CONFIG_HOME` 以下をまるごとバージョン管理する。バージョン管理という
よりバックアップと復旧に対応するという意味が強い。Git を用いるならば、GitHub な
どのリポジトリーホストにリモートリポジトリーを構築して同期させればよい。

自作プログラム
======================================================================

自分でプログラムを設計するときには、設定ファイルの仕様を [XDGSpec]_ に準拠するこ
とを誓う。ドットファイルを |HOME| に直接置かせようものなら、プログラム使用者に不
便をかける時代だ。

資料
======================================================================

.. [XDGSpec] `XDG Base Directory Specification
   <https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html>`__
.. [XDGWiki] `XDG Base Directory - ArchWiki
   <https://wiki.archlinux.org/title/XDG_Base_Directory>`__

当初は [XDGSpec]_ の読書ノートを執筆するつもりでいたが、[XDGWiki]_ で十分要約さ
れているのでその必要がなくなった。本稿では具体的な作業内容に絞ることができた。
